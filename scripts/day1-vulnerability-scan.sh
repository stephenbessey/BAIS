#!/bin/bash

# Day 1: Security Vulnerability Scanning Script
# Comprehensive security scanning for BAIS platform

set -e

echo "🔒 Starting Day 1: Security Vulnerability Scanning"
echo "=================================================="

# Create security reports directory
mkdir -p security-reports

# Install security scanning tools if not already installed
echo "📦 Installing security scanning tools..."
pip3 install bandit safety semgrep pip-audit

# Run Bandit for Python security issues
echo "🔍 Running Bandit security scan..."
bandit -r backend/production/ -f json -o security-reports/bandit-report.json
bandit -r backend/production/ -f html -o security-reports/bandit-report.html

# Run Safety check for vulnerable dependencies
echo "🔍 Running Safety dependency check..."
safety check --json --output security-reports/safety-report.json
safety check --full-report > security-reports/safety-report.txt

# Run pip-audit for dependency vulnerabilities
echo "🔍 Running pip-audit..."
pip-audit --desc --output security-reports/pip-audit-report.txt

# Run Semgrep for advanced static analysis
echo "🔍 Running Semgrep static analysis..."
semgrep --config=auto backend/production/ --json -o security-reports/semgrep-report.json

# Generate summary report
echo "📊 Generating vulnerability summary..."
cat > security-reports/day1-vulnerability-summary.md << 'EOF'
# Day 1 Vulnerability Assessment Summary

## Scan Results

### Bandit Security Scan
- Report: [bandit-report.html](bandit-report.html)
- JSON: [bandit-report.json](bandit-report.json)

### Safety Dependency Check
- Report: [safety-report.txt](safety-report.txt)
- JSON: [safety-report.json](safety-report.json)

### pip-audit Report
- Report: [pip-audit-report.txt](pip-audit-report.txt)

### Semgrep Static Analysis
- JSON: [semgrep-report.json](semgrep-report.json)

## Critical Issues (P0 - Fix Immediately)
- [ ] Review bandit high-severity findings
- [ ] Address any critical dependency vulnerabilities

## High Priority Issues (P1 - Fix This Week)
- [ ] Review bandit medium-severity findings
- [ ] Update vulnerable dependencies

## Medium Priority Issues (P2 - Fix Before Production)
- [ ] Review bandit low-severity findings
- [ ] Address code quality issues

## Low Priority Issues (P3 - Fix Post-Launch)
- [ ] Review informational findings
- [ ] Address style and convention issues

## Next Steps
1. Review all scan results
2. Prioritize fixes based on severity
3. Update dependencies to latest secure versions
4. Document remediation actions

EOF

echo "✅ Day 1 vulnerability scanning completed!"
echo "📁 Reports saved in security-reports/ directory"
echo "🔍 Review the summary: security-reports/day1-vulnerability-summary.md"
